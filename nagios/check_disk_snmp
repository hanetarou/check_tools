#!/bin/bash

# parameter
COM=public
WARN=70
CRIT=90
OID=.1.3.6.1.2.1.25.2.3.1  # HOST-RESOURCES-MIB::hrStorageEntry
MODE=0
isCHECKSIZE=0
IGNORE_DIR=""
TYPE="DEFAULT"

function usage(){
  cat << EOL
  Usage
    check_disk_snmp -H IP [-w WARN(%)] [-c CRIT(%)] [-m MODE] [-t AlertType]
      -H  IP address
      -i  igonore directory
      -w  WARNING  Used  Percent or Used size
      -c  Critical Used  Percent or Used size
      -m  Mode  Local:0 NFS:1
      -C  SNMP Community Name
      -s  Set mode free disk size check
      -t  Set alert type('dev')
EOL
exit 0
}

function alert_slack(){
  if [ $TYPE = "dev" ]; then
    cat <<EOF
開発サーバのディスクの空き容量が少なくなりました。
不要なデータを削除して空き容量を確保してください。
EOF
  fi
}

# arguments
[ $# -eq 0 ] && usage

while getopts H:i:w:c:m:C:st: opts
do
  case $opts in
    H) HOST=$OPTARG ;;  # IP address
    i) IGNORE_DIR=$OPTARG ;;  # IGNORE_DIR
    w) WARN=$OPTARG ;;  # WARNING  Used Percent
    c) CRIT=$OPTARG ;;  # Critical Used Percent
    m) MODE=$OPTARG ;;  # Local:0 NFS:1
    C)  COM=$OPTARG ;;  # SNMP Community Name
    s) isCHECKSIZE=1 ;; # DiskSize mode
    t) TYPE=$OPTARG ;;  # Alert type
    *) usage ;;
  esac
done

shift $(( $OPTIND - 1 ))

# snmp parameter
WALK="/usr/bin/snmpwalk -v2c -t 30 -c $COM $HOST"
TMP=`mktemp`   # snmpwalk dump
TMP2=`mktemp`  # record output

# disk parameter
if $WALK SNMPv2-MIB::sysDescr.0 |grep -P 'VMware ESX|Windows' >/dev/null ;then
  RESERVED_PCT=0  # reserved percent is zero for VMWare,Windows
else
  RESERVED_PCT=1  # filesystem reserved percent for Linux
fi
IGNORE_PARTITION=(
/var/xen/xc-install
/dev/shm
$IGNORE_DIR
)
UNIT=GB
UNIT_CALC=1024/1024    # GB

# Nagios status
RET_OK=0
RET_WARN=1
RET_CRIT=2
RET_UNKNOWN=3

# Check parameter
WARN_FLAG=0
WARN_SUM=0
CRIT_FLAG=0
CRIT_SUM=0
IGNORE_FLAG=0

#
# Main
#

# get walk result
$WALK $OID >$TMP
[ $? -ne 0 ] && { echo "snmpwalk failed,exited"; rm -f $TMP $TMP2; exit $RET_UNKNOWN; }

# mode check
if [ $MODE -eq 0 ]; then
  # get local disk index
  INDEX=`grep HOST-RESOURCES-TYPES::hrStorageFixedDisk $TMP |\
  awk '{print $1}' |cut -f2 -d.`

elif [ $MODE -eq 1 ]; then 
  # get network disk index
  INDEX=`grep HOST-RESOURCES-TYPES::hrStorageNetworkDisk $TMP |\
  awk '{print $1}' |cut -f2 -d.`

fi

# get information by index
for i in $INDEX ; do
  # get disk mount point
  MNT=`grep HOST-RESOURCES-MIB::hrStorageDescr.$i $TMP |\
  awk "{print \\$4}"`

  # get block size
  BLOCK_SIZE=`grep HOST-RESOURCES-MIB::hrStorageAllocationUnits.$i $TMP |awk '{printf $4 / 1024}'`
  
  # get disk size
  SIZE=`grep HOST-RESOURCES-MIB::hrStorageSize.$i $TMP |awk '{printf "%d",$4}'`
  if [ $SIZE -ne 0 ]; then
    SIZE=`grep HOST-RESOURCES-MIB::hrStorageSize.$i $TMP |\
    awk "{print \\$4 / $UNIT_CALC * $BLOCK_SIZE }"`
    SIZE=`echo $SIZE $RESERVED_PCT |awk '{print $1 * ((100 - $2) / 100) }'`
  fi

  # get disk used
  USED=`grep HOST-RESOURCES-MIB::hrStorageUsed.$i $TMP |awk '{printf "%d",$4}'`
  if [ $USED -ne 0 ]; then
    USED=`grep HOST-RESOURCES-MIB::hrStorageUsed.$i $TMP |\
    awk "{print \\$4 / $UNIT_CALC * $BLOCK_SIZE }"`
    USED=`echo $USED $RESERVED_PCT |awk '{print $1 * ((100 - $2) / 100) }'`
  fi

  # ignore partition check
  IGNORE_FLAG=0
  for (( ind=0; ind < ${#IGNORE_PARTITION[@]}; ++ind )) ; do
    echo $MNT | grep "${IGNORE_PARTITION[$ind]}" >/dev/null
    [ $? -eq 0 ] && IGNORE_FLAG=1
  done

  # ignored partition is matched , skip WARN,CRIT FLAG
  if [ $IGNORE_FLAG -eq 1 ]; then
      WARN_FLAG=0
      CRIT_FLAG=0
  else

    # zero check
    if [ `echo $SIZE |awk '{printf "%d",$1}'` -eq 0 ]; then
      PCT=0
      WARN_FLAG=0
      CRIT_FLAG=0

    # check size mode
    elif [ $isCHECKSIZE -eq 1 ]; then
      # get disk used percent
      PCT=`echo $USED $SIZE |awk '{ print $1 / $2 * 100 }'`

      # check limit
      WARN_FLAG=`echo "$SIZE $USED $WARN" | awk '{free=$1-$2} END {if($3 > free) print 1; else print 0}'`
      CRIT_FLAG=`echo "$SIZE $USED $CRIT" | awk '{free=$1-$2} END {if($3 > free) print 1; else print 0}'`

    else           # size not zero
      # get disk used percent
      PCT=`echo $USED $SIZE |awk '{ print $1 / $2 * 100 }'`

      # check warn limit
      WARN_FLAG=`echo $PCT $WARN |awk '{if($1 > $2) print 1; else print 0}'`

      # check crit limit
      CRIT_FLAG=`echo $PCT $CRIT |awk '{if($1 > $2) print 1; else print 0}'`
    fi

  fi

  # sum FLAG value
  WARN_SUM=$(($WARN_SUM + $WARN_FLAG))
  CRIT_SUM=$(($CRIT_SUM + $CRIT_FLAG))
  FREE=`echo "$SIZE $USED" | awk '{print $1-$2}'`
  
  # print stdout
  if [ $WARN_FLAG -ne 0 -o $CRIT_FLAG -ne 0 ]; then
    printf "%s SIZE:%.2f$UNIT USED:%.2f$UNIT FREE:%.2f$UNIT PERCENT:%.2f\n" $MNT $SIZE $USED $FREE $PCT >>$TMP2
  fi

done 

# check warn or crit status
if   [ $CRIT_SUM -ne 0 ]; then
  echo "DISK CRIT"
  cat $TMP2
  alert_slack
  rm -f $TMP $TMP2
  exit $RET_CRIT

elif [ $WARN_SUM -ne 0 ]; then
  echo "DISK WARN"
  cat $TMP2
  alert_slack
  rm -f $TMP $TMP2
  exit $RET_WARN

else
  echo "DISK OK"
  cat $TMP2
  rm -f $TMP $TMP2
  exit $RET_OK
fi
