#!/bin/bash
#
# check mysql process
#

HOST=localhost
PORT=3306
USER=hoge
PASSWORD=hoge
SQL='show databases'
MYSQL=/usr/bin/mysql
MYSQL_OPTS='--connect_timeout=1'

# functions
function doQuery() {
  result=`${MYSQL} ${MYSQL_OPTS} -u${USER} -p${PASSWORD} -h ${HOST} -P ${PORT} -e "${SQL}" 2>&1`
}

# nagios setting
STATE_OK=0        # define the exit code if status is OK
STATE_WARNING=1   # define the exit code if status is Warning
STATE_CRITICAL=2  # define the exit code if status is Critical
STATE_UNKNOWN=3   # define the exit code if status is Unknown

# slave stat
Slave_OK="Yes"   # MySQL Slave_SQL_Running for an OK status?
Slave_NG="No"    # MySQL Slave_SQL_Running for a Critical status?

### option
isHelp=false
while getopts hH:p:w:c: OPT
do
  case $OPT in
    h) isHelp=true;;
    H) HOST=$OPTARG;;
    p) PORT=$OPTARG;;
    w) warn_delay=$OPTARG;;   # for replication delay check warning
    c) crit_delay=$OPTARG;;   # for replication delay check critical
  esac
done

if $isHelp; then
  echo "usage: $0 [-h] [-H hostname] [-p port] [-w delay second] [-c delay second]"
  exit 0
fi

### DB check
doQuery

if [ $? -ne 0 ]; then
  echo "MySQL NG"
  echo ${result}
  exit ${STATE_CRITICAL}
else 
  echo "MySQL OK"
fi

### Slave status check
SQL='show slave status\G'
doQuery
CNT=`echo -n "${result}" |wc -l`

if [ $CNT -eq 0 ] ; then
  # master
  exit ${STATE_OK}
fi

check=`echo "${result}" |grep Slave_SQL_Running: | awk '{print $2}'`
checkio=`echo "${result}" |grep Slave_IO_Running: | awk '{print $2}'`
masterinfo=`echo "${result}" |grep  Master_Host: | awk '{print $2}'`
delayinfo=`echo "${result}" |grep Seconds_Behind_Master: | awk '{print $2}'`

# Output of different exit states
if [ ${check} = "NULL" ]; then
  echo "Slave CRITICAL: Slave_SQL_Running is answering NULL"
  exit ${STATE_CRITICAL}
fi

if [ ${check} = ${Slave_NG} ]; then
  echo "Slave CRITICAL: ${host}:${port} Slave_SQL_Running: ${check}"
  exit ${STATE_CRITICAL}
fi

if [ ${checkio} = ${Slave_NG} ]; then
  echo "Slave CRITICAL: ${host} Slave_IO_Running: ${checkio}"
  exit ${STATE_CRITICAL}
fi

if [ ${checkio} = "Connecting" ]; then
  echo "Slave CRITICAL: ${host} Slave_IO_Running: ${checkio}"
  exit ${STATE_CRITICAL}
fi

if [ ${check} = ${Slave_OK} ] && [ ${checkio} = ${Slave_OK} ]; then
  # Delay thresholds are set
  if [[ -n ${warn_delay} ]] && [[ -n ${crit_delay} ]]; then
    if ! [[ ${warn_delay} -gt 0 ]]; then
      echo "Warning threshold must be a valid integer greater than 0"
      exit $STATE_UNKNOWN
    fi

    if ! [[ ${crit_delay} -gt 0 ]]; then
      echo "Warning threshold must be a valid integer greater than 0"
      exit $STATE_UNKNOWN
    fi

    if [[ -z ${warn_delay} ]] || [[ -z ${crit_delay} ]]; then
      echo "Both warning and critical thresholds must be set"
      exit $STATE_UNKNOWN
    fi

    if [[ ${warn_delay} -gt ${crit_delay} ]]; then
      echo "Warning threshold cannot be greater than critical"
      exit $STATE_UNKNOWN
    fi

    if [[ ${delayinfo} -ge ${crit_delay} ]]; then
      echo "Slave CRITICAL: Slave is ${delayinfo} seconds behind Master | delay=${delayinfo}s"
      exit ${STATE_CRITICAL}
    elif [[ ${delayinfo} -ge ${warn_delay} ]]; then
      echo "Slave WARNING: Slave is ${delayinfo} seconds behind Master | delay=${delayinfo}s"
      exit ${STATE_WARNING}
    else
      echo -e "Slave OK\nmaster: ${masterinfo}\nslave is ${delayinfo} seconds behind master | delay=${delayinfo}s"
      exit ${STATE_OK}
    fi
  else
    # Without delay thresholds
    echo -e "Slave OK\nmaster: ${masterinfo}\nslave is ${delayinfo} seconds behind master | delay=${delayinfo}s"
    exit ${STATE_OK};
  fi
fi

echo "Slave UNKNOWN: should never reach this part (Slave_SQL_Running is ${check}, Slave_IO_Running is ${checkio})"
exit ${STATE_UNKNOWN}